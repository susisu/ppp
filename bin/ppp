#!/usr/bin/env node

"use strict";

const commander = require("commander");
const fs = require("fs");
const indent = require("indent-string");
const os = require("os");
const path = require("path");
const yaml  = require("js-yaml");

const printer = require("../lib/printer");
const thisPkg = require("../package.json");

function readFile(filepath) {
  return new Promise((resolve, reject) => {
    fs.readFile(filepath, "utf-8", (err, data) => {
      if (err) {
        reject(err);
        return;
      }
      resolve(data);
    });
  });
}

function readStdin() {
  let buffer = "";
  return new Promise((resolve, reject) => {
    process.stdin.on("readable", () => {
      const chunk = process.stdin.read();
      if (chunk !== null) {
        buffer += chunk;
      }
    });
    process.stdin.on("end", () => {
      resolve(buffer);
    });
  });
}

process.title = "ppp";
process.stdin.setEncoding("utf8");

const configPath = path.join(os.homedir(), ".config", "ppp", "config.yml");

const defaultFields = [
  "name",
  "version",
  "description",
  "license",
  "author",
  "homepage",
  "binaries",
  "engines",
  "peerDependencies",
  "tags",
];
const defaultWrapSize = 80;
const indentSize = 2;

commander
  .version(thisPkg["version"], "-v, --version")
  .option("-w, --wrap <int>", "wrap size (default = 80)", parseInt)
  .parse(process.argv);

function isObject(val) {
  return typeof val === "object" && val !== null;
}

function warn(msg) {
  process.stderr.write(`Warning: ${msg}\n`);
}

async function readConfig(filepath) {
  let file;
  try {
    file = await readFile(filepath);
  }
  catch (err) {
    return {};
  }
  let data;
  try {
    data = yaml.safeLoad(file);
  }
  catch (err) {
    warn("Invalid config format");
    return {};
  }
  if (data === null) {
    return {};
  }
  if (!isObject(data)) {
    warn("Invalid config format");
    return {};
  }
  return data;
}

function getFields(conf) {
  if (!Object.prototype.hasOwnProperty.call(conf, "fields")) {
    return defaultFields;
  }
  const valid = Array.isArray(conf["fields"])
    && conf["fields"].every(field => typeof field === "string");
  if (!valid) {
    throw new TypeError("'fields' must be a list of field names");
  }
  return conf["fields"];
}

function getWrapSize(conf) {
  if (commander["wrap"] !== undefined) {
    if (Number.isNaN(commander["wrap"])) {
      throw new TypeError("'wrap' must be an integer");
    }
    return commander["wrap"] > 0 ? commander["wrap"] : null;
  }
  if (!Object.prototype.hasOwnProperty.call(conf, "wrap")) {
    return defaultWrapSize;
  }
  if (typeof conf["wrap"] !== "number") {
    throw new TypeError("'wrap' must be an integer");
  }
  return conf["wrap"] > 0 ? conf["wrap"] : null;
}

async function main() {
  const conf = await readConfig(configPath);
  const fields = getFields(conf);
  const wrapSize = getWrapSize(conf);
  const input = await readStdin();
  const data = JSON.parse(input);
  if (!isObject(data) || Object.prototype.hasOwnProperty.call(data, "error")) {
    throw new TypeError("Unexpected format");
  }
  const pkg = Array.isArray(data) ? data[data.length - 1] : data;
  if (!isObject(pkg)) {
    throw new TypeError("Unexpected format");
  }
  const text = indent(
    printer.print(pkg, fields, wrapSize !== null ? wrapSize - indentSize : null, indentSize),
    indentSize
  );
  process.stdout.write(text + "\n");
}

main().catch(err => {
  process.stderr.write(String(err) + "\n");
});

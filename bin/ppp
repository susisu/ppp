#!/usr/bin/env node

"use strict";

const childProcess = require("child_process");
const commander = require("commander");
const fs = require("fs");
const indent = require("indent-string");
const os = require("os");
const path = require("path");
const yaml  = require("js-yaml");

const printer = require("../lib/printer");
const thisPkg = require("../package.json");

function readFile(filepath) {
  return new Promise((resolve, reject) => {
    fs.readFile(filepath, "utf-8", (err, data) => {
      if (err) {
        reject(err);
        return;
      }
      resolve(data);
    });
  });
}

function readStdin() {
  return new Promise((resolve, reject) => {
    let buffer = "";
    process.stdin.setEncoding("utf8");
    process.stdin.on("readable", () => {
      let chunk = process.stdin.read();
      while (chunk !== null) {
        buffer += chunk;
        chunk = process.stdin.read();
      }
    });
    process.stdin.on("end", () => {
      resolve(buffer);
    });
  });
}

function readSubprocess(cmd, args) {
  return new Promise((resolve, reject) => {
    const sub = childProcess.spawn(cmd, args);
    let buffer = "";
    sub.stdout.on("data", chunk => {
      buffer += chunk;
    });
    sub.on("error", err => {
      reject(err);
    });
    sub.on("exit", (code, signal) => {
      if (signal !== null) {
        reject(new Error(`process '${cmd}' interrupted by signal: ${signal}`));
        return;
      }
      // also accept code === 1 because it may contain well-formed error information
      if (code !== 0 && code !== 1) {
        reject(new Error(`process '${cmd}' exited with non-zero code: ${code}`));
        return;
      }
      resolve(buffer);
    });
  });
}

const npmCommand = "npm";

async function npmView(name) {
  const args = ["view", name, "--json", "--loglevel=silent"];
  const result = await readSubprocess(npmCommand, args);
  return parseNpmResult(result);
}

async function npmLs(name, inGlobal) {
  const args = ["ls", name, "--depth=0", "--json", "--loglevel=silent"];
  if (inGlobal) {
    args.push("--global");
  }
  const result = await readSubprocess(npmCommand, args);
  return parseNpmResult(result);
}

function parseNpmResult(result) {
  const data = JSON.parse(result);
  if (!isObject(data)) {
    throw new TypeError("Unexpected format");
  }
  if (data.hasOwnProperty("error")) {
    const code = data["error"]["code"];
    const summary = data["error"]["summary"];
    if (code && summary) {
      throw new Error(`${code}\n${summary}`);
    } else {
      throw new TypeError("Unexpected format");
    }
  }
  return data;
}

function isObject(val) {
  return typeof val === "object" && val !== null;
}

function warn(msg) {
  process.stderr.write(`Warning: ${msg}\n`);
}

function distinct(arr) {
  return arr.filter((x, i) => arr.indexOf(x) === i);
}

process.title = "ppp";

const configPath = path.join(os.homedir(), ".config", "ppp", "config.yml");

const defaultFields = [
  "name",
  "version",
  "description",
  "license",
  "author",
  "homepage",
  "binaries",
  "engines",
  "peerDependencies",
  "tags",
];
const defaultWrapSize = 80;
const indentSize = 2;

function collect(val, accum) {
  if (!accum) {
    return [val];
  } else {
    return accum.concat([val]);
  }
}

commander
  .description(thisPkg["description"])
  .version(thisPkg["version"], "-v, --version")
  .option("-f, --add-field <name>", "append a field (repeatable)", collect)
  .option("-w, --wrap <int>", "wrap output to the specified size", parseInt)
  .arguments("[package]")
  .parse(process.argv);

async function main() {
  const conf = await readConfig(configPath);
  const fields = getFields(conf);
  const wrapSize = getWrapSize(conf);
  const pkg = await readPackageInfo();
  await printInfo(pkg, fields, wrapSize);
}

main().catch(err => {
  process.stderr.write(String(err) + "\n");
  process.exit(1);
});

async function readConfig(filepath) {
  let file;
  try {
    file = await readFile(filepath);
  } catch (err) {
    return {};
  }
  let data;
  try {
    data = yaml.safeLoad(file);
  } catch (err) {
    warn("Invalid config format");
    return {};
  }
  if (data === null) {
    return {};
  }
  if (!isObject(data)) {
    warn("Invalid config format");
    return {};
  }
  return data;
}

function getFields(conf) {
  const additionalFields = commander["addField"] || [];
  if (!conf.hasOwnProperty("fields")) {
    return distinct(defaultFields.concat(additionalFields));
  }
  const valid = Array.isArray(conf["fields"])
    && conf["fields"].every(field => typeof field === "string");
  if (!valid) {
    throw new TypeError("'fields' must be a list of field names");
  }
  return distinct(conf["fields"].concat(additionalFields));
}

function getWrapSize(conf) {
  if (commander["wrap"] !== undefined) {
    if (Number.isNaN(commander["wrap"])) {
      throw new TypeError("'wrap' must be an integer");
    }
    return commander["wrap"] > 0 ? commander["wrap"] : null;
  }
  if (!conf.hasOwnProperty("wrap")) {
    return defaultWrapSize;
  }
  if (typeof conf["wrap"] !== "number") {
    throw new TypeError("'wrap' must be an integer");
  }
  return conf["wrap"] > 0 ? conf["wrap"] : null;
}

async function readPackageInfo() {
  let data;
  const name = commander.args[0];
  if (name !== undefined) {
    data = await npmView(name);
  } else {
    const input = await readStdin();
    data = parseNpmResult(input);
  }
  const pkg = Array.isArray(data) ? data[data.length - 1] : data;
  if (!isObject(pkg)) {
    throw new TypeError("Unexpected format");
  }
  return pkg;
}

async function printInfo(pkg, fields, wrapSize) {
  const opts = {
    wrapSize  : wrapSize !== null ? Math.max(wrapSize - indentSize, 0) : null,
    indentSize: indentSize,
  };
  const reqs = { installedVersions };
  const result = await printer.print(pkg, fields, opts, reqs);
  process.stdout.write(indent(result, indentSize) + "\n");
}

async function installedVersions(name) {
  const [localVersion, globalVersion] = await Promise.all([
    installedVersion(name, false),
    installedVersion(name, true),
  ]);
  return {
    local : localVersion,
    global: globalVersion,
  };
}

async function installedVersion(name, inGlobal) {
  let version;
  try {
    const ls = await npmLs(name, inGlobal);
    version = ls["dependencies"][name]["version"];
    if (typeof version !== "string") {
      version = null;
    }
  } catch (err) {
    version = null;
  }
  return version;
}
